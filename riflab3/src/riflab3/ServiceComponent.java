package riflab3;

import java.util.LinkedList;
import java.util.List;

import org.eclipse.osgi.framework.console.CommandInterpreter;
import org.eclipse.osgi.framework.console.CommandProvider;

import riflab3.entities.Product;
import riflab3.logic.ReqAnalysis;
import riflab3.logic.ReqChecking;
import riflab3.logic2.services.DesignService;
import riflab3.logic2.services.DevelopService;
import riflab3.logic2.services.DocService;
import riflab3.logic2.services.IntegrationService;
import riflab3.logic2.services.ReqRefineService;
import riflab3.logic2.services.TestService;
import riflab3.logic2.services.ValidationService;
import riflab3.logic2.services.VerificationService;


// referenced in component.xml
public class ServiceComponent implements CommandProvider {
	
	private DesignService designService;
	private DevelopService developService;
	private DocService docService;
	private IntegrationService integrationService;
	private ReqRefineService reqRefineService;
	private TestService testService;
	private ValidationService validationService;
	private VerificationService verificationService;
	
	public List<Product> asList(Product p1) {
		List<Product> l = new LinkedList<Product>();
		l.add(p1);
		return l;
	}

	public List<Product> asList(Product q1, Product q2, Product q3) {
		List<Product> l = new LinkedList<Product>();
		l.add(q1);
		l.add(q2);
		l.add(q3);
		return l;
	}

	public void _riflab3(CommandInterpreter ci) {
		try{
		String arg = ci.nextArgument();
		boolean isConsistent = false;
		if (arg == null) {
			ci.println("usage: riflab3 [true|false]");
			ci.println();
			ci.println("the first parameter specifies if the requirement will be consistent or not");
			return;
		} else {
			if (arg.equalsIgnoreCase("true")) {
				isConsistent = true;
			} else if (arg.equalsIgnoreCase("false")) {
				isConsistent = false;
			} else {
				ci.println("error: not true|false");
				return;
			}
		}
		Product p1, p2, p3, p4;
		
		ReqAnalysis reqAnalysis = new ReqAnalysis();
		p1 = reqAnalysis.doIt(new LinkedList<Product>());
		ci.println("after ReqAnalysis: " + p1);
		
		ReqChecking reqChecking = new ReqChecking();
		p1 = reqChecking.doIt(asList(p1));
		ci.println("after ReqChecking: " + p1);
		
		if (!isConsistent) {
			p1 = reqRefineService.doReqRefine(asList(p1));
			ci.println("after ReqRefine: " + p1);
		}
		
		p1 = designService.doDesign(asList(p1));
		ci.println("after Design: " + p1);
		
		p2 = developService.doDevelopment(asList(p1));
		ci.println("after Development: " + p2);

		p3 = testService.doTesting(asList(p1));
		ci.println("after Testing: " + p3);

		p4 = docService.doDocCreation(asList(p1));
		ci.println("after Development: " + p4);
		
		p1 = integrationService.doIntegration(asList(p2, p3, p4));
		ci.println("after Integration: " + p1);

		p1 = verificationService.doVerification(asList(p1));
		ci.println("after Verification: " + p1);

		p1 = validationService.doValidation(asList(p1));
		ci.println("after Validation: " + p1);
		} catch (NullPointerException e) {
			ci.println("service call failed!");
		}
}

	public String getHelp() {
		StringBuffer buffer = new StringBuffer();
		/*buffer.append("---Generated by PDE---\n");
		buffer.append("\tdict check <word> - check for the existence of a word\n");
		buffer.append("\tdict languages - list the languages available\n");*/
		return buffer.toString();
	}
	
	public void setDesign(DesignService l2) {
		this.designService = l2;
	}
	
	public void unsetDesign(DesignService l2) {
		this.designService = null;
	}
	public void setDevelop(DevelopService l2) {
		this.developService = l2;
	}
	
	public void unsetDevelop(DevelopService l2) {
		this.developService = null;
	}
	public void setDoc(DocService l2) {
		this.docService = l2;
	}
	
	public void unsetDoc(DocService l2) {
		this.docService = null;
	}
	public void setIntegration(IntegrationService l2) {
		this.integrationService = l2;
	}
	
	public void unsetIntegration(IntegrationService l2) {
		this.integrationService = null;
	}
	public void setReqRefine(ReqRefineService l2) {
		this.reqRefineService = l2;
	}
	
	public void unsetReqRefine(ReqRefineService l2) {
		this.reqRefineService = null;
	}
	public void setTest(TestService l2) {
		this.testService = l2;
	}
	
	public void unsetTest(TestService l2) {
		this.testService = null;
	}
	public void setValidation(ValidationService l2) {
		this.validationService = l2;
	}
	
	public void unsetValidation(ValidationService l2) {
		this.validationService = null;
	}
	public void setVerification(VerificationService l2) {
		this.verificationService = l2;
	}
	
	public void unsetVerification(VerificationService l2) {
		this.verificationService = null;
	}
}